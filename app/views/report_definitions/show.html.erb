
<% content_for :head do %>
  <%= javascript_include_tag 'highcharts' %>
<% end %>

<style>
  /*.ui-progressbar{ background-image: url(images/pbar-ani.gif); }*/
  td:hover{
    background-color:#ddd;
  }
  th{
    text-align:left;
  }
  th .formula{
    font-size:9pt;
    font-weight:normal;
  }
  .error {
    background-color:#ED8593;
  }
  .stale{
    background-color:#F2E194;
  }
  .template{
    display:none;
  }
  .hide{ display:none; }
  .popup,tr > td.calculated:nth-child(2) .popup{
    margin-left:60px;
    margin-top:-5px;
    padding:10px;
    display:none;
    background-color:#fff;
    position:absolute;
    border:1px solid #ddd;
    -moz-border-radius: 15px;
    border-radius: 15px;
    width:400px;
    z-index:99;
  }
  tr > td:last-child .popup{
    margin-left:-250px;
  }
  fieldset{
    -moz-border-radius: 15px;
    border-radius: 15px;
    border:1px solid #ddd;
  }
</style>

<script>
  function createGraph(id){
       var chart = new Highcharts.Chart({
      chart: {
         renderTo:id,
         type: 'spline'
      },
      title: {
         text: 'Snow depth in the Vikjafjellet mountain, Norway'
      },
      subtitle: {
         text: 'An example of irregular time data in Highcharts JS'   
      },
      xAxis: {
         type: 'datetime',
         dateTimeLabelFormats: { // don't display the dummy year
            month: '%e. %b',
            year: '%b'
         }
      },
      yAxis: {
         title: {
            text: 'Units of somesort'
         }
      },
      tooltip: {
         formatter: function() {
                   return Highcharts.dateFormat('%e %b, %Y', this.x) +': '+ this.y;
         }
      }
   }); 
     return chart;       
  }
</script>
<script>
  function random(min,max){
    return Math.floor(Math.random() * (max - min + 1)) + min;
  }
  function increment(bar,max,speed){
    var interval = null;
    var animate = function(){
      value = bar.progressbar("value") + random(0,5);
      if(value > 100 ){
        bar.progressbar({value:100});
      }else{
        bar.progressbar({value:value});
      }
      if(value >= max){
        clearInterval(interval);
      }
    }
    interval = setInterval(animate,speed);
  } 

  function Cell(jqSelected, project_id,evaluation_id,formula_id){
    this.jqSelected = jqSelected;
    this.formula_id = formula_id;
    this.project_id = project_id;
    this.evaluation_id = evaluation_id;

  }

  Cell.prototype.calculate = function(){
    var that = this;
    this.template = jQuery('#cell_template').clone().removeAttr('id').removeClass('template');
    var url = '/evaluations/' + that.evaluation_id + '.json?project_id=' + that.project_id + '&datetime=' + escape('<%= @date.iso8601 %>');

    jQuery.ajax({
      url:url,
      beforeSend:function(){that.beginToSpin();},
      success:function(data){ that.success(data);},
      error:function(xhr){ that.error(xhr.message);},
      dataType:'json' 
    });
  }

  Cell.prototype.beginToSpin = function(){
    var value = 0;
    var progressbar = this.jqSelected.progressbar({value:value}); 
    increment(progressbar,random(40,60),random(100,300));
  }
  Cell.prototype.stopSpinning = function(callback){
      var that = this;
      increment(this.jqSelected,100,50);
      this.jqSelected.progressbar({complete:function(){
        that.jqSelected.progressbar('destroy');
        that.jqSelected.text('');
        that.jqSelected.removeClass('ui-progressbar ui-widget-content');
        callback.call();
      }});
  }

  Cell.prototype.success = function(data, statua){
      var that = this;
      that.stopSpinning(function(){
        that.display(data); 
      });
  }


  Cell.prototype.display = function(data){
    function snapshotFromTemplate(snapshot){
      var template = jQuery('#snapshot_template').clone().removeAttr('id').removeClass('template');
      if(typeof(snapshot.metric_snapshot) !== 'undefined'){
        var snap = snapshot.metric_snapshot;
        if(snap.value == null){
          template.addClass('error');
        }
        else if(snapshot.is_stale){
          template.addClass('stale');
        }
        template.find('.is_stale').text(snapshot.is_stale);  
        template.find('.created_at').text(new Date(snap.created_at).toLocaleString());
        template.find('.updated_at').text(new Date(snap.updated_at).toLocaleString());
        template.find('.value').text(snap.value);
        template.find('.datetime').text(new Date(snap.datetime).toLocaleString());
        template.find('.metric').text(snapshot.metric_name);
        template.find('.id').text(snap.id);
      }else{
        template.find('.value').text('null');
        template.addClass('error');
      }
      return template;
    }
    var that = this;
    var template = this.template;

    template.find('.evaluated_string').text(data.calculated_string);

    if(data.isSuccess){
      template.find('.value').text(data.value + '/' + data.grade.grade.name );
      if(data.stale_snapshots.length > 0){ 
        template.addClass('stale'); 
      }
    }else if(!data.isSuccess){ 
      template.prepend(data.message);
      template.addClass('error'); 
    }


    jQuery(data.snapshots).each(function(){
      var snapshotTemplate = snapshotFromTemplate(this);  
      template.find('.snapshots').append(snapshotTemplate);
    });

    that.jqSelected.append(template);
  }

  Cell.prototype.error = function(message){
      var that = this;
      var data = {
        isSuccess:false,
        message:message,
        snapshots:[],
        stale_snapshots:[]
      };
      that.stopSpinning(function(){
        that.display(data); 
      });
  }

  jQuery(document).ready(function(){
        jQuery('td').live('mouseover mouseout',function(e){
          if(jQuery(this).has('.popup')){
            var popup = jQuery(this).find('.popup');
            if(e.type =="mouseover"){
              popup.show();
            }else{
              popup.hide();
            }
          }
        });
        var cell;
        <% @report_definition.projects.each do |project| %>
          <% @evaluations.each do |evaluation| %>
            cell = new Cell(jQuery('#<%= cell_id(project,evaluation) %>'), '<%= project.id %>', '<%= evaluation.id %>', '<%= evaluation.formula.id %>');
            cell.calculate();
          <% end %>
        <% end %>


      //graphs
    jQuery.ajax({
      url:"<%= report_definition_path(@report_definition.id) %>",
      //beforeSend:function(){that.beginToSpin();},
      success:function(report_def){ 
        function evaluation_id(evaluation){
          return "evaluation_graph_" + evaluation.id;
        }
        var jq_graphs = jQuery('#graphs');
        var graph_template = jQuery("#graph_template").clone().removeAttr('id').removeClass('template');
        jQuery.each(report_def.evaluations,function(idx,evaluation_wrapper){
          var jq_graph = graph_template.clone(); 
          jq_graph.attr('id', evaluation_id(evaluation_wrapper.evaluation)); 
          jq_graphs.append(jq_graph);
          var chart = createGraph(jq_graph.attr('id'));
          jQuery.each(report_def.projects,function(idx_proj, project_wrapper){
            var chartGraph = chart;
            var project_wrapper = project_wrapper;
            var that = this;
           jQuery.ajax({dataType:'json',url:"/evaluations/" + evaluation_wrapper.evaluation.id +".json?project_id="+ project_wrapper.project.id + "&all=true&numMonths=5",
              success:function(calculations){
                
                var data = [];
                jQuery.each(calculations,function(i,calc){ 
                  var date =  Date.UTC(calc.date.year,calc.date.month,calc.date.day) 
                  var val = calc.value;
                  data.push([date,val]);
                 });
                chart.addSeries({
                    name:project_wrapper.project.name,
                    data:data 
                },true,null);
              }
            });
          }); 
        });
      },
      //error:function(xhr){ that.error(xhr.message);},
      dataType:'json' 
    });
         
  });
</script>


<p id="notice"><%= notice %></p>

<div id="cell_template" class="template"> 
  <div><span class="label hide">value:</span><span class="value"></span></div>
  <div class="popup">
    calculation:<div class="evaluated_string"></div>
    <fieldset class="snapshots"><legend>metrics used in calculation</legend></fieldset>
  </div>
</div>

  <fieldset id="snapshot_template" class="snapshot template"><legend>snapshot</legend>
  <div>metric:<span class="metric"></span></div>
  <div>value: <span class="value"></span></div>
  <div class="hide">stale?: <span class="is_stale"></span></div>
  <div>measured on:<span class="datetime"></span></div>
  <div class="hide">created at: <span class="created_at"></span></div>
  <div>last synchronized: <span class="updated_at"></span></div>
  <div class="hide">id:<span class="id"></span></div>
  </fieldset>

<h1><%= @report_definition.name %> </h1>
<h2>
<%= link_to '<', report_definition_path(@report_definition, :date => @date - 1.day) %>
<%= date_format @date %>
<% if(@date.today?) %>
>
<% else %>
  <%= link_to '>', report_definition_path(@report_definition, :date => @date + 1.day) %>
<% end %>
</h2>

<% evaluations =  @report_definition.evaluations %>
<table> 
  <thead>
    <tr>
      <th>Projects</th>
      <% evaluations.each do |evaluation| %>
        <th id="<%= identify(evaluation,evaluation.formula) %>">
          <%= evaluation.formula.name %>
          <div class="formula"><span class="label hide">Formula:</span><%= evaluation.formula.to_s %></div>
        </th>
      <% end %>
    </tr>
  </thead>
  <tbody>
      <% @report_definition.projects.each do |project| %>
        <tr>
          <td id="<%= identify(project) %>" class="project"><%= project.name %></td>
          <% evaluations.each do |evaluation| %>
           <td id="<%= cell_id(project,evaluation) %>" class="calculated"> </td> 
          <% end %>
        </tr>
      <% end %>
  </tbody>
</table>


<div id="graphs">
    <div id="graph_template" class="template" height="200" width="400" ></div>
</div>

<%= link_to 'Edit', edit_report_definition_path(@report_definition) %> |
<%= link_to 'Back', report_definitions_path %>
<img src="http://naivepagetracker.heroku.com/websites/6/visit.gif" /> 


