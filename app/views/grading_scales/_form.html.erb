
  <script>
    function Nested(selected){
      this.size = selected.length
      this.last = jQuery(selected.get(this.size - 1))
      this.template = jQuery(selected.get(0)).clone();
    }

    Nested.prototype.add = function(){
      var new_item = this.template.clone()
      var form_items = new_item.find('input,select,textarea');
      var that = this;
      form_items.each(function(){
        var attr = jQuery(this).attr('name');
        if (typeof attr !== 'undefined' && attr !== false) {
          jQuery(this).attr('name', attr.replace(/\d+/, that.size + 1));    
          jQuery(this).removeAttr('id')
        }
      });
      this.last.after(new_item);
      this.last = new_item;
      this.size = this.size + 1;
    }

    $.fn.nested = function(options) {
      var defaults = {
        addButton: '#add_button'
      }
      var options = $.extend(defaults, options); 
      var nested = new Nested(this);
      jQuery(options.addButton).click(function(e){ e.preventDefault(); nested.add(); });
    };

    jQuery(document).ready(function(){
      //jQuery('select').chosen();
      jQuery('.nested').nested({addButton:'#add_grade'});

      jQuery('.remove').live('click',function(){
        var checkbox = jQuery(this);
        var siblings = checkbox.siblings();
        var isChecked = checkbox.is(':checked');
        var parent = checkbox.parent();
        if(isChecked){
          parent.css('background-color', '#ddd');
          siblings.each(function(){ jQuery(this).css({'background-color': '#FF4040', 'color': '#eee'}); });
        }else{
          parent.css('background-color', 'transparent');
          siblings.each(function(){ jQuery(this).css({'background-color': 'transparent', 'color': 'inherit'}); });
        }
      });
    });

  </script>


<script>
  function sortGrades(){
    var keys = []
    var grades = new Array();
    jQuery('.grade').each(function(){
        val = jQuery(this).find(":input[name*='value']").val();
        grades[parseInt(val)] = jQuery(this);
        keys.push(parseInt(val));
    });
    keys.sort();
    for(var i = 0; i< keys.length; i++){
      var item = grades[keys[i]];
      item.detach();
      jQuery('#grades').prepend(item);
    }
  }
jQuery(document).ready(function(){
  jQuery(".grade :input[name*='value']").live('keyup',function(){sortGrades();jQuery(this).focus().effect('highlight', {}, 4000);});
  
});

  


</script>



<%= form_for(@grading_scale) do |f| %>
  <% if @grading_scale.errors.any? %>
    <div id="error_explanation">
      <h2><%= pluralize(@grading_scale.errors.count, "error") %> prohibited this grading_scale from being saved:</h2>

      <ul>
      <% @grading_scale.errors.full_messages.each do |msg| %>
        <li><%= msg %></li>
      <% end %>
      </ul>
    </div>
  <% end %>

  <div class="field">
    <%= f.label :name %><br />
    <%= f.text_field :name %>
  </div>
  
<fieldset id="grades" ><legend>grades</legend>
  <% @grading_scale.grades.build %>
  <%= f.fields_for :grades do |grade| %>
  <fieldset class="nested grade"><legend>grade</legend>
  <span class="field">
    <%= grade.label :name %>
    <%= grade.text_field :name %>
  </span>
  <span class="field">
    <%= grade.label :value %>
    <%= grade.text_field :value %>
  </span>
  </fieldset>
  <% end %>
  <a href="#" id="add_grade" class=".add">add grade</a>
</fieldset>
  
  <div class="actions">
    <%= f.submit %>
  </div>
<% end %>
